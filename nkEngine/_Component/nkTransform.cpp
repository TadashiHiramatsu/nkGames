/**
 * @file _Component\nkTransform.cpp
 *
 * トランスフォームクラスの実装.
 */
#include"nkEngine/nkstdafx.h"
#include"nkTransform.h"

namespace nkEngine
{

	/**
	 * 更新.
	 *
	 * @author HiramatsuTadashi
	 * @date 2017/01/10
	 */
	void Transform::Update()
	{
		Matrix mTrans, mScale;

		//移動行列の計算
		mTrans.MakeTranslation(Position_);
		//回転行列の計算
		RotationMatrix_.MakeRotationQuaternion(Rotation_);
		//拡大行列の計算
		mScale.MakeScaling(Scale_);

		//ローカル行列を計算
		LocalMatrix_.Mul(mScale, RotationMatrix_);
		LocalMatrix_.Mul(LocalMatrix_, mTrans);

		//親子関係を計算
		if (ParentMatrix_)
		{
			WorldMatrix_.Mul(LocalMatrix_, *ParentMatrix_);
		}
		else
		{
			WorldMatrix_ = LocalMatrix_;
		}

		//ワールド行列の逆行列を計算
		WorldInvMatrix_.Inverse(WorldMatrix_);
	
	}

	/**
	* ビルボードする更新.
	*
	* @author HiramatsuTadashi
	* @date 2017/01/16
	*/
	void Transform::BillboardUpdate(const Matrix& rot)
	{
		Matrix mTrans, mScale;

		//移動行列の計算
		mTrans.MakeTranslation(Position_);

		//クォータニオン.
		Quaternion qRot;

		float s;
		s = sin(0);
		qRot.x = rot.m[2][0] * s;
		qRot.y = rot.m[2][1] * s;
		qRot.z = rot.m[2][2] * s;
		qRot.w = cos(0);

		//回転行列.
		Matrix mRot;
		mRot.MakeRotationQuaternion(qRot);

		RotationMatrix_.Mul(rot, mRot);

		//拡大行列の計算
		mScale.MakeScaling(Scale_);

		//ローカル行列を計算
		LocalMatrix_.Mul(mScale, RotationMatrix_);
		LocalMatrix_.Mul(LocalMatrix_, mTrans);

		//親子関係を計算
		if (ParentMatrix_)
		{
			WorldMatrix_.Mul(LocalMatrix_, *ParentMatrix_);
		}
		else
		{
			WorldMatrix_ = LocalMatrix_;
		}

		//ワールド行列の逆行列を計算
		WorldInvMatrix_.Inverse(WorldMatrix_);

	}

}// namespace nkEngine